#!/usr/bin/python3

import argparse
import atexit
from glob import glob
import os
import subprocess
import sys
import tempfile
import time

# FIXME use stat / and Check "Device" output
def find_root_dev():
    df = subprocess.check_output(["df","/"], universal_newlines=True)
    for line in df.split("\n"):
        if line.startswith("/"):
            return line.split()[0][:-1]

    return "/dev/vda"

def find_esp_mount():
    return "/boot/efi"

def unmount(path):
    subprocess.call(["umount", "-l", path])

def disconnect_nbd(blockdev, temp_dir):
    subprocess.call(["qemu-nbd", "-d", blockdev], stdout=subprocess.DEVNULL)
    subprocess.call(["rm", "-rf", temp_dir])
    subprocess.call(["rmmod", "nbd"])

def parse_fdisk(fdisk_output):
    result = {}
    for line in fdisk_output.split("\n"):

        if not line.startswith("/"): continue
        parts = line.split()

        inf = {}
        inf['part_type_guid'] = parts[1]

        result[parts[0]] = inf
    return result

def main():
    parser = argparse.ArgumentParser(description="VMSPEC validation suite")
    parser.add_argument("-i","--image", help="Image to test")
    arguments = parser.parse_args()

    image=arguments.image
    #  sudo modprobe nbd max_part=16
    if image is not None:
        blockdev = "/dev/nbd0"
        test_dir = tempfile.mkdtemp("vmspec")
        try:
            subprocess.call(["modprobe", "nbd", "max_part=16"])
        except:
            print("ERROR: \"modprobe nbd\" failed, are your root?")
            return 1
        time.sleep(2)
        subprocess.call(["qemu-nbd", image, "-c",blockdev])
        atexit.register(disconnect_nbd, blockdev, test_dir)
    else:
        blockdev = find_root_dev()
        test_dir = find_esp_mount()

    try:
        fdisk_output = subprocess.check_output(["fdisk","-l",blockdev,"-o","Device,Type-UUID"],
                universal_newlines=True)
    except:
        print("VMSPEC-GPT: FAIL")
        return 1

    test_disk="/dev/null"
    has_esp = False
    for disk, info in parse_fdisk(fdisk_output).items():
        if info['part_type_guid'] == "C12A7328-F81F-11D2-BA4B-00A0C93EC93B":
            has_esp = True
            test_disk = disk
    #    print([disk, " ".join(["%s=%r" % i for i in info.items()])])
    if has_esp:
        print("VMSPEC-GPT: PASS")
        print("VMSPEC-ESP: PASS")
    if image is not None:
        subprocess.call(["mount", "-t", "vfat", test_disk, test_dir])
        atexit.register(unmount, test_dir)
    try:
        file_output = subprocess.check_output(("file -b %s/EFI/BOOT/BOOTAA64.EFI" % test_dir ),
                universal_newlines=True, shell=True)
    except:
        print("VMSPEC-BOOTAA64: FAIL")
        return 1
    if file_output.startswith('PE32+ executable (EFI application)'):
        print("VMSPEC-BOOTAA64: PASS")
    else:
        print("VMSPEC-BOOTAA64: FAIL")

    if image is not None:
        print("skipping runtime tests")
        return 0

    if os.path.isdir("/sys/firmware/efi"):
        print("VMSPEC-EFI: PASS")
    else:
        print("VMSPEC-EFI: FAIL")

    has_efi_rtc=False
    for rtc in glob("/sys/class/rtc/rtc*"):
        if os.path.realpath(rtc).startswith("/sys/devices/platform/rtc-efi/rtc/rtc0"):
            has_efi_rtc=True

    if has_efi_rtc:
        print("VMSPEC-EFI-RTC: PASS")
    else:
        print("VMSPEC-EFI-RTC: FAIL")

    if os.path.isdir("/sys/firmware/acpi"):
        print("VMSPEC-ACPI: PASS")
    else:
        print("VMSPEC-ACPI: FAIL")

if __name__ == '__main__': main()
