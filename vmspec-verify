#!/usr/bin/python

import argparse
import atexit
from glob import glob
import os
import subprocess
import sys
import tempfile
import time

# FIXME use stat / and Check "Device" output
def find_root_dev():
    df = subprocess.check_output(["df","/"], universal_newlines=True)
    for line in df.split("\n"):
        if line.startswith("/"):
            return line.split()[0][:-1]

    return "/dev/vda"

def find_esp_mount():
    return "/boot/efi"

def unmount(path):
    subprocess.call(["umount", "-l", path])

def disconnect_nbd(blockdev, temp_dir):
    subprocess.call(["qemu-nbd", "-d", blockdev])
    subprocess.call(["rm", "-rf", temp_dir])
    time.sleep(1)
    subprocess.call(["rmmod", "nbd"])

def load_image(blockdev, image):
    test_dir = tempfile.mkdtemp("vmspec")
    try:
        subprocess.call(["modprobe", "nbd", "max_part=16"])
    except:
        print("ERROR: \"modprobe nbd\" failed, are your root?")
        sys.exit(1)
    time.sleep(1)
    subprocess.call(["qemu-nbd", image, "-c",blockdev])
    atexit.register(disconnect_nbd, blockdev, test_dir)
    return test_dir

def parse_parted(blockdev):
    result = {}
    try:
        output = subprocess.check_output(["parted","-m",blockdev,"-s","print"],
                universal_newlines=True)
    except:
        result["disklabel"] = "not-gpt"
        return result
    for line in output.split("\n"):
        if line.startswith("BYT;"): continue
        info = line.split(":")
        if info[0].startswith("/"):
            result["disklabel"] = info[5]
            continue
        if len(info)>=6 and ( info[6].find("esp")>=0 or
                info[5] == "EFI System Partition" ):
            result["esp"] = "%sp%s" % (blockdev, info[0])
    return result

def parse_fdisk(blockdev):
    result = {}
    try:
        output = subprocess.check_output(["fdisk","-l",blockdev,"-o","Device,Type-UUID"],
                universal_newlines=True)
    except:
        result["disklabel"] = "not-gpt"
        return result

    for line in output.split("\n"):
        if line.startswith("Disklabel type"):
            parts=line.split(":")
            result["disklabel"] = parts[1].lstrip()
        if not line.startswith("/"): continue
        parts = line.split()

        if parts[1] == "C12A7328-F81F-11D2-BA4B-00A0C93EC93B":
            result["esp"] = parts[0]

    return result

def print_fail(testname):
    print("%s: FAIL"  % testname)

def print_pass(testname):
    print("%s: PASS"  % testname)

def print_result(testname, result):
    if result:
        print("%s: PASS"  % testname)
    else:
        print("%s: FAIL"  % testname)

def check_hw_description():
    print_result("VMSPEC-EFI", os.path.isfile("/sys/firmware/efi/systab"))
    print_result("VMSPEC-EFI-DTB", os.path.isfile("/sys/firmware/fdt"))
    has_acpi = False
    with open('/sys/firmware/efi/systab') as acpi:
        for line in acpi:
            if line.startswith("ACPI20"):
                has_acpi = True

    print_result("VMSPEC-EFI-ACPI", has_acpi)

def check_sbsa_console():
    has_sbsa_uart = False
    with open('/proc/tty/driver/ttyAMA') as sbsa_uart:
        for line in sbsa_uart:
            if line.startswith("serinfo:"): continue
            parts = line.split()
            if parts[2]=="SBSA":
                has_sbsa_uart = True
    print_result("VMSPEC-OS-SBSA-UART", sbsa_uart)

def main():
    parser = argparse.ArgumentParser(description="VMSPEC validation suite")
    parser.add_argument("-i","--image", help="Image to test")
    arguments = parser.parse_args()

    image=arguments.image
    #  sudo modprobe nbd max_part=16
    if image is not None:
        blockdev = "/dev/nbd0"
        test_dir = load_image(blockdev, image)
    else:
        if not os.uname()[4] == "aarch64":
            print("Run vmspec-verify inside arm64 VM or pass -i image argument")
            sys.exit(0)
        blockdev = find_root_dev()
        test_dir = find_esp_mount()

    if os.path.isfile("/sbin/parted"):
        parts = parse_parted(blockdev)
    else:
        parts = parse_fdisk(blockdev)

    print_result("VMSPEC-IMAGE-GPT", parts["disklabel"] == "gpt")
    print_result("VMSPEC-IMAGE-ESP", "esp" in parts)

    if "esp" in parts:
        test_disk=parts["esp"]
    else:
        test_disk="/dev/null"

    if image is not None:
        subprocess.call(["partprobe", blockdev])
        subprocess.call(["mount", "-t", "vfat", test_disk, test_dir])
        atexit.register(unmount, test_dir)
    try:
        file_output = subprocess.check_output(("file -b %s/EFI/BOOT/BOOTAA64.EFI" % test_dir ),
                universal_newlines=True, shell=True)
    except:
        print_fail("VMSPEC-IMAGE-BOOTAA64")
        return 1

    has_bootaa64 = (file_output.startswith("PE32+ executable (EFI application)") or
        file_output.startswith("MS-DOS executable"))
    print_result("VMSPEC-IMAGE-BOOTAA64", has_bootaa64 )

    if image is not None:
        print("skipping runtime tests")
        return 0

    check_hw_description()
    print_result("VMSPEC-OS-EFI", os.path.isdir("/sys/firmware/efi"))

    has_efi_rtc=False
    for rtc in glob("/sys/class/rtc/rtc*"):
        if os.path.realpath(rtc).startswith("/sys/devices/platform/rtc-efi/rtc/rtc0"):
            has_efi_rtc=True
    print_result("VMSPEC-OS-EFI-RTC", has_efi_rtc)
    print_result("VMSPEC-OS-ACPI", os.path.isdir("/sys/firmware/acpi"))
    check_sbsa_console()

if __name__ == '__main__': main()
