#!/usr/bin/python

import argparse
import os
import sys
import subprocess
import re

QEMU_CMD_FMT = ("%s %s -m 1024 -M virt "
                "-netdev user,id=user0 -device virtio-net-device,netdev=user0 "
                "-device virtio-rng-pci "
                "-device virtio-blk-device,drive=image -drive if=none,id=image,file=%s %s %s %s "
                "-device virtio-blk-device,drive=cdrom "
                "-drive if=none,id=cdrom,file=cloud.img,format=raw")

boot_result_re = re.compile("^.*(VMSPEC-.*): (PASS|FAIL)")

default_efi = "http://snapshots.linaro.org/components/kernel/leg-virt-tianocore-edk2-upstream/1468/QEMU-AARCH64/RELEASE_GCC5/QEMU_EFI.fd"

results = []

def log_result(args, testname, result):
    "Log result for summary."
    results.append((testname, result))
    if not args.silent:
        print ("%s: %s" % (testname, "PASS" if result else "FAIL"))

def boot_qemu(args, testname, qemu_cmd):
    "Boot a QEMU instance and gather the online results."
    if args.silent:
        logfile=open("%s.log" % testname, "w")
    else:
        print qemu_cmd

    timeout = "timeout --foreground 10m "

    proc = subprocess.Popen(timeout+qemu_cmd, shell=True, stdout=subprocess.PIPE)
    while True:
        nextline = proc.stdout.readline()
        search = boot_result_re.search(nextline)
        if search and len(search.groups()) == 2:
            log_result(args, search.groups()[0],
                       True if search.groups()[1] == "PASS" else False)
        if nextline == '' and proc.poll() is not None:
            break
        if args.silent:
            logfile.write(nextline)
        else:
            sys.stdout.write(nextline)
            sys.stdout.flush()

    if args.silent:
        logfile.close()

    proc.communicate()
    log_result(args, testname, proc.returncode == 0)


def main():
    "The main test."

    parser = argparse.ArgumentParser(description="VMSPEC boot testing")
    parser.add_argument("-i","--image", help="Hard drive Image",
            default="https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-arm64-uefi1.img")
    parser.add_argument("-f","--firmware", help="Firmware to test",
            default="/usr/share/qemu-efi/QEMU_EFI.fd")
    parser.add_argument("-q","--qemu", help="Qemu to test",
            default="qemu-system-aarch64")
    parser.add_argument("-s","--silent", help="Hide QEMU output",
           action='store_true')
    parser.add_argument("-p","--persistent", help="Test persistent UEFI variables",
           action='store_true')
    parser.add_argument("--no-3", help="Disable testung if GICv3 (if your hardware doesn't have it)",
                        action='store_true')

    arguments = parser.parse_args()
    output = "-display vnc=none -serial stdio"

    if os.path.exists(arguments.image):
        image = arguments.image
    elif os.path.exists(os.path.basename(arguments.image)):
        image = os.path.basename(arguments.image)
    else:
        print("downloading test image: %s" % (arguments.image))
        subprocess.check_call(["wget","-nv",arguments.image])
        image = os.path.basename(arguments.image)


    if os.path.exists(arguments.firmware):
        firmware = arguments.firmware
    else:
        print("no EFI firmware installed, downloading %s" % (default_efi))
        subprocess.check_call(["wget","-nc", "-nv",default_efi])
        firmware = "QEMU_EFI.fd"

    # follow instructions from: https://wiki.linaro.org/LEG/UEFIforQEMU
    if arguments.persistent:
        try:
            subprocess.check_call("cat %s /dev/zero|dd iflag=fullblock bs=1M count=64 of=flash0.img" % firmware,shell=True)
        except:
            True
        subprocess.call("dd if=/dev/zero of=flash1.img bs=1M count=64", shell=True)
        firmware_arg = "-drive if=pflash,file=flash0.img,format=raw -drive if=pflash,file=flash1.img,format=raw"
    else:
        firmware_arg = "-bios %s" % firmware

    if os.uname()[4] == "aarch64":
	accel="-cpu host -M accel=kvm"
    else:
	accel="-cpu cortex-a57"

    if not os.path.exists("cloud.img"):
        subprocess.call(["cloud-localds","cloud.img", "cloud.txt"])

    # Default Boot
    qemu_command = QEMU_CMD_FMT % (arguments.qemu, accel, image, firmware_arg, "", output)
    boot_qemu(arguments, "VMSPEC-BOOT-DEFAULT", qemu_command)

    # Boot forcing GICv3
    if not arguments.no_3:
        qemu_command = QEMU_CMD_FMT % (arguments.qemu, accel, image, firmware_arg,
                                       " -machine gic-version=3", output)
        boot_qemu(arguments, "VMSPEC-BOOT-GICv3", qemu_command)

    fails = 0
    for r in results:
        print "%s: %s" % (r[0], "PASS" if r[1] else "FAIL")
        if not r[1]:
            fails += 1

    sys.exit(fails)

if __name__ == '__main__': main()
