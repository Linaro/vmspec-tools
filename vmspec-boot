#!/usr/bin/python

import argparse
import atexit
from glob import glob
import os
import subprocess
import sys
import tempfile
import time

qemu_common = "%s %s -m 1024 -M virt -netdev user,id=user0 -device virtio-net-device,netdev=user0 -device virtio-blk-device,drive=image -drive if=none,id=image,file=%s -device virtio-blk-device,drive=cdrom -drive if=none,id=cdrom,file=cloud.img,format=raw %s %s %s"

default_efi = "http://snapshots.linaro.org/components/kernel/leg-virt-tianocore-edk2-upstream/1468/QEMU-AARCH64/RELEASE_GCC5/QEMU_EFI.fd"

def print_fail(testname):
    print("%s: FAIL"  % testname)

def print_pass(testname):
    print("%s: PASS"  % testname)

def print_result(testname, result):
    if result:
        print("%s: PASS"  % testname)
    else:
        print("%s: FAIL"  % testname)

def main():
    parser = argparse.ArgumentParser(description="VMSPEC boot testing")
    parser.add_argument("-i","--image", help="Hard drive Image",
            default="https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-arm64-uefi1.img")
    parser.add_argument("-f","--firmware", help="Firmware to test",
            default="/usr/share/qemu-efi/QEMU_EFI.fd")
    parser.add_argument("-q","--qemu", help="Qemu to test",
            default="qemu-system-aarch64")
    parser.add_argument("-s","--silent", help="Hide QEMU output",
           action='store_true')
    arguments = parser.parse_args()

    if arguments.silent:
        output = "-display vnc=none -serial file:vmspec-qemu.log"
    else:
        output = "-nographic"

    if os.path.exists(arguments.image):
        image = arguments.image
    elif os.path.exists(os.path.basename(arguments.image)):
        image = os.path.basename(arguments.image)
    else:
        print("downloading test image: %s" % (arguments.image))
        subprocess.check_call(["wget","-nv",arguments.image])
        image = os.path.basename(arguments.image)

    if os.path.exists(arguments.firmware):
        firmware = "-bios %s" % arguments.firmware
    else:
        print("no EFI firmware installed, downloading %s" % (default_efi))
        subprocess.check_call(["wget","-nc", "-nv",default_efi])
        firmware = "-bios ./QEMU_EFI.fd"

    if os.uname()[4] == "aarch64":
	accel="-cpu host -M accel=kvm"
    else:
	accel="-cpu cortex-a57"

    if not os.path.exists("cloud.img"):
        subprocess.call(["cloud-localds","cloud.img", "cloud.txt"])
    qemu_command = qemu_common % (arguments.qemu, accel, image, firmware, "", output)
    print(qemu_command)
    ret = subprocess.call("timeout 10m "+qemu_command, shell=True) == 0
    print_result("VMSPEC-BOOT-AARCH64", ret)
    if arguments.silent:
        subprocess.call(["grep", "VMSPEC-", "vmspec-qemu.log" ])

    qemu_command = qemu_common % (arguments.qemu, accel, image, firmware, " -machine gic-version=3", output)
    print(qemu_command)
    ret = subprocess.call("timeout 10m "+qemu_command, shell=True) == 0
    print_result("VMSPEC-BOOT-GICv3", ret)
    if arguments.silent:
        subprocess.call(["grep", "VMSPEC-", "vmspec-qemu.log" ])

if __name__ == '__main__': main()
